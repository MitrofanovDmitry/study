Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet
https://www.coursera.org/learn/sql-for-data-science/supplement/VSJ29/yelp-dataset-sql-lookup

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 (select count(*) from attribute)
ii. Business table = 10000 (select count(*) from business)
iii. Category table = 10000 (select count(*) from category)
iv. Checkin table = 10000 (select count(*) from checkin)
v. elite_years table = 10000 (select count(*) from elite_years)
vi. friend table = 10000 (select count(*) from friend)
vii. hours table = 10000 (select count(*) from hours)
viii. photo table = 10000 (select count(*) from photo)
ix. review table = 10000 (select count(*) from review)
x. tip table = 10000 (select count(*) from tip)
xi. user table = 10000 (select count(*) from user)



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (select count(id) from business)
ii. Hours = 1562 (select count(distinct business_id) from hours)
iii. Category = 2643 (select count(distinct business_id) from category)
iv. Attribute = 1115 (select count(distinct business_id) from attribute)
v. Review = 10000 (select count(id) from review)
vi. Checkin = 493 (select count(distinct business_id) from checkin)
vii. Photo = 10000 (select count(id) from photo)
viii. Tip = 537 (select count(distinct user_id) from tip)
            3979 (select count(distinct business_id) from tip)
ix. User = 10000 (select count(id) from user)
x. Friend = 11 (select count(distinct user_id) from friend)
xi. Elite_years = 2780 (select count(distinct user_id) from elite_years)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	SQL code used to arrive at answer: 
	select * from user where 
	name is null or
	review_count is null or
	yelping_since is null or
	useful is null or
	funny is null or
	cool is null or
	fans is null or
	average_stars is null or
	compliment_hot is null or
	compliment_more is null or
	compliment_profile is null or
	compliment_cute is null or
	compliment_list is null or
	compliment_note is null or
	compliment_plain is null or
	compliment_cool is null or
	compliment_funny is null or
	compliment_writer is null or
	compliment_photos is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars 
	select min(stars), max(stars), avg(stars) from review
	
		min:		max:		avg:
		1		5		3.7082
	
	ii. Table: Business, Column: Stars
	select min(stars), max(stars), avg(stars) from business
	
		min:		max:		avg:
		1.0		5.0		3.6549
	
	iii. Table: Tip, Column: Likes
	select min(likes), max(likes), avg(likes) from tip
	
		min:		max:		avg:
		0		2		0.0144
	
	iv. Table: Checkin, Column: Count
	select min(count), max(count), avg(count) from checkin
	
		min:		max:		avg:
		1		53		1.9414
	
	v. Table: User, Column: Review_count
	select min(review_count), max(review_count), avg(review_count) from user
	
		min:		max:		avg:
		0		2000		24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	select city, 
	sum(review_count) as reviews
	from business
	group by city
	order by reviews desc
	
	Copy and Paste the Result Below:
	+-----------------+---------+
	| city            | reviews |
	+-----------------+---------+
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |
	| Tempe           |   10504 |
	| Pittsburgh      |    9798 |
	| Montréal        |    9448 |
	| Chandler        |    8112 |
	| Mesa            |    6875 |
	| Gilbert         |    6380 |
	| Cleveland       |    5593 |
	| Madison         |    5265 |
	| Glendale        |    4406 |
	| Mississauga     |    3814 |
	| Edinburgh       |    2792 |
	| Peoria          |    2624 |
	| North Las Vegas |    2438 |
	| Markham         |    2352 |
	| Champaign       |    2029 |
	| Stuttgart       |    1849 |
	| Surprise        |    1520 |
	| Lakewood        |    1465 |
	| Goodyear        |    1155 |
	+-----------------+---------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

	SQL code used to arrive at answer:
	select stars, 
	count(review_count) as reviews
	from business
	where city == 'Avon'
	group by stars

	Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+---------+
	| stars | reviews |
	+-------+---------+
	|   1.5 |       1 |
	|   2.5 |       2 |
	|   3.5 |       3 |
	|   4.0 |       2 |
	|   4.5 |       1 |
	|   5.0 |       1 |
	+-------+---------+

ii. Beachwood

	SQL code used to arrive at answer:
	select stars, 
	count(review_count) as reviews
	from business
	where city == 'Beachwood'
	group by stars

	Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+---------+
	| stars | reviews |
	+-------+---------+
	|   2.0 |       1 |
	|   2.5 |       1 |
	|   3.0 |       2 |
	|   3.5 |       2 |
	|   4.0 |       1 |
	|   4.5 |       2 |
	|   5.0 |       5 |
	+-------+---------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select name, review_count from user order by review_count desc limit 3
		
	Copy and Paste the Result Below:
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	It seems that there's no apparent correlation between these two variables.
	From the results of the following query we can see that, for example:
	Mimi has 968 reviews and 497 fans. Gerald - 2000 and 253 accordingly.
	So, Mimi has twice less reviews, but twice more fans than Gerald.
	But we also cannot say that there's some negative correlation here.
	
	SQL code:
	select name, review_count, fans from user order by review_count desc limit 10
	
	The Result:
	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	| Harald    |         1153 |  311 |
	| eric      |         1116 |   16 |
	| Roanna    |         1039 |  104 |
	| Mimi      |          968 |  497 |
	| Christine |          930 |  173 |
	+-----------+--------------+------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 'love' (1780 vs 232)
	
	SQL code used to arrive at answer:
	select count(*) as love from review where text like '%love%'
	select count(*) as hate from review where text like '%hate%'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select name, fans from user order by fans desc limit 10
	
	Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours? Yes
	
	SQL code:
	select h.hours, case 
	when b.stars between 2 and 3 then '2-3'
	when b.stars between 4 and 5 then '4-5'
	else 'other' end as class
	from business as b inner join hours as h
	on b.id = h.business_id
	where b.city = 'Las Vegas'
	and h.hours like 'Friday%'
	group by class, hours
	order by class, hours
	
	The Result:
	+--------------------+-------+
	| hours              | class |
	+--------------------+-------+
	| Friday|11:00-0:00  | 2-3   |
	| Friday|8:00-22:00  | 2-3   |
	| Friday|10:00-19:00 | 4-5   |
	| Friday|10:00-23:00 | 4-5   |
	| Friday|11:00-20:00 | 4-5   |
	| Friday|7:00-17:00  | 4-5   |
	| Friday|8:00-16:30  | 4-5   |
	| Friday|8:00-17:00  | 4-5   |
	| Friday|9:00-17:00  | 4-5   |
	| Friday|0:00-0:00   | other |
	| Friday|10:00-16:00 | other |
	+--------------------+-------+

ii. Do the two groups you chose to analyze have a different number of reviews? Yes

	SQL code:
	select sum(review_count) as reviews, 
	case when stars between 2 and 3 then '2-3'
	when stars between 4 and 5 then '4-5'
	else 'other' end as class
	from business 
	where city = 'Las Vegas'
	group by class
	
	The Result:
	+---------+-------+
	| reviews | stars |
	+---------+-------+
	|   15265 | 2-3   |
	|   46952 | 4-5   |
	|   20637 | other |
	+---------+-------+
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	When comparing the neighborhoods of lower with higher rated
	businesses, the only difference we can point out is that there's 
	no lower rated businesses in the Anthem neighborhood.

	SQL code (2-3 stars):
	select distinct neighborhood from business 
	where city = 'Las Vegas' and stars between 2 and 3
	order by neighborhood
	
	SQL code (4-5 stars):
	select distinct neighborhood from business 
	where city = 'Las Vegas' and stars between 4 and 5
	order by neighborhood
	
	The Result (2-3 stars):
	+-----------------+
	| neighborhood    |
	+-----------------+
	|                 |
	| Centennial      |
	| Chinatown       |
	| Downtown        |
	| Eastside        |
	| Northwest       |
	| South Summerlin |
	| Southeast       |
	| Southwest       |
	| Spring Valley   |
	| Summerlin       |
	| Sunrise         |
	| The Lakes       |
	| The Strip       |
	| University      |
	| Westside        |
	+-----------------+
	
	The Result (4-5 stars):
	+-----------------+
	| neighborhood    |
	+-----------------+
	|                 |
	| Anthem          |
	| Centennial      |
	| Chinatown       |
	| Downtown        |
	| Eastside        |
	| Northwest       |
	| South Summerlin |
	| Southeast       |
	| Southwest       |
	| Spring Valley   |
	| Summerlin       |
	| Sunrise         |
	| The Lakes       |
	| The Strip       |
	| University      |
	| Westside        |
	+-----------------+
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: There are more open businesses than closed ones.
	
	SQL code:
	select is_open, count(*) 
	from business group by is_open
	
	The Result:
	+---------+----------+
	| is_open | count(*) |
	+---------+----------+
	|       0 |     1520 |
	|       1 |     8480 |
	+---------+----------+
         
ii. Difference 2: The average number of reviews is bigger for open ones.
	
	SQL code:
	select is_open, avg(review_count)
	from business group by is_open
	
	The Result:
	+---------+-------------------+
	| is_open | avg(review_count) |
	+---------+-------------------+
	|       0 |     23.1980263158 |
	|       1 |     31.7570754717 |
	+---------+-------------------+

iii. Difference 3: The average rating is bigger for open ones.
	
	SQL code:
	select is_open, avg(stars)
	from business group by is_open
	
	The Result:
	+---------+---------------+
	| is_open |    avg(stars) |
	+---------+---------------+
	|       0 | 3.52039473684 |
	|       1 | 3.67900943396 |
	+---------+---------------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
clustering businesses to find commonalities or anomalies between them
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
First of all, we could try to visualize our data using dimensionality reduction techniques (for example: PCA, tSNE and so on) in order to figure out how well our businesses are separated in groups. After that we could try several clustering algorithms, such as KMeans and DBSCAN. These two steps might help us to better understand our data, find out the similarities and anomalies between different groups of businesses present in our database.
                  
iii. Output of your finished dataset:
+-----------------+-----------------+-----------------+-------+-------+--------------+
| category        | name            | city            | state | stars | review_count |
+-----------------+-----------------+-----------------+-------+-------+--------------+
| Asian Fusion    | Flaming Kitchen | Markham         | ON    |   3.0 |           25 |
| Restaurants     | Flaming Kitchen | Markham         | ON    |   3.0 |           25 |
| Transportation  | S-Bahnhof Stutt | Stuttgart-Vaihi | BW    |   2.0 |            4 |
| Public Transpor | S-Bahnhof Stutt | Stuttgart-Vaihi | BW    |   2.0 |            4 |
| Hotels & Travel | S-Bahnhof Stutt | Stuttgart-Vaihi | BW    |   2.0 |            4 |
| Train Stations  | S-Bahnhof Stutt | Stuttgart-Vaihi | BW    |   2.0 |            4 |
| Metro Stations  | S-Bahnhof Stutt | Stuttgart-Vaihi | BW    |   2.0 |            4 |
| Restaurants     | Deli 194        | Edinburgh       | EDH   |   3.0 |            4 |
| Delis           | Deli 194        | Edinburgh       | EDH   |   3.0 |            4 |
| Electronics     | Freeman's Car S | Charlotte       | NC    |   3.5 |            8 |
| Shopping        | Freeman's Car S | Charlotte       | NC    |   3.5 |            8 |
| Automotive      | Freeman's Car S | Charlotte       | NC    |   3.5 |            8 |
| Car Stereo Inst | Freeman's Car S | Charlotte       | NC    |   3.5 |            8 |
| Restaurants     | Fiesta Ranchera | Champaign       | IL    |   2.0 |            4 |
| Mexican         | Fiesta Ranchera | Champaign       | IL    |   2.0 |            4 |
| Restaurants     | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Bars            | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Italian         | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Nightlife       | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Pizza           | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Salad           | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| Gluten-Free     | Eklectic Pie -  | Mesa            | AZ    |   4.0 |          129 |
| American (Tradi | Cracker Barrel  | Sheffield Villa | OH    |   3.5 |           27 |
| Restaurants     | Cracker Barrel  | Sheffield Villa | OH    |   3.5 |           27 |
| Southern        | Cracker Barrel  | Sheffield Villa | OH    |   3.5 |           27 |
+-----------------+-----------------+-----------------+-------+-------+--------------+
(Output limit exceeded, 25 of 696 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:
select 
substr(c.category,1,15) as category, 
substr(b.name,1,15) as name, 
substr(b.city,1,15) as city, 
b.state, b.stars, b.review_count
from business as b 
left join category as c 
on b.id = c.business_id
where c.category is not null
